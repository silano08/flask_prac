```bash
mongod --install --serviceName MongoDB --serviceDisplayName MongoDB --dbpath C:\data\db --logpath C:\data\db\log\mongoservice.log --logappend
```

1. 글을 박스로 만들어줘라
css > display:block;
2. <span class="a b"> 이런식으로두개만들기가능
3. broad(전체) CSS수식 
*{}
4. 주석처리
ctrl + / 하면 대부분 됨l
CSS > /**/
JS > //
html > <!-- -->

#######################2주차
스파르타 2주차

### 애들한테 가르쳐줄것
1. 부트스트랩으로 홈페이지 구성
2. 제이쿼리로 부트스트랩에 기능구현
3. 제이쿼리 + ajax로 api(데이터) 받아오는법
###
1. Ajax는 제이쿼리를 임포트한 페이지에서만 동작

######### ajax call ##########3
ajax 기본골격
$.ajax({
  type: "GET",
  url: "여기에URL을입력",
  data: {},
  success: function(response){
    console.log(response)
  }
})

## 특정값 미만 출력
$.ajax({
  type: "GET",
  url: "http://openapi.seoul.go.kr:8088/6d4d776b466c656533356a4b4b5872/json/RealtimeCityAir/1/99",
  data: {},
  success: function(response){
    let rows = response['RealtimeCityAir']['row']
    for (let i =0; i<rows.length; i++){
        let gu_name = rows[i]['MSRSTE_NM']
        let gu_mise = rows[i]['IDEX_MVL']
        if(gu_mise<70){
        console.log(gu_name,gu_mise)
        }
    }
  }
})

#로딩후에 바로실행해주는 ajax코드
$(document).ready(function(){
  listing();
});

function listing() {
	console.log('화면 로딩 후 잘 실행되었습니다');
}
########## 스파르타 3주차

1. 파이썬 가상환경에 대한 이해(venv)
	- 라이브러리 담아두는 폴더
	- 설치할 라이브러리들이 담긴다고 생각하면됨
	- 파이참보니까 폴더당 하나인거같음

2. 몽고DB와 robo3t
 - 몽고db는 우리눈에 안보이는 서비스를 제공
 - robo3t는 그런 몽고db를 보이게해줌

3. 데이터베이스
DB를 쓰는 이유 : 데이터를 가져다쓰기위해

. 종류
 - SQL (ms-sql,my-sql등) : 엑셀에 더 가까움, 열과 행을 정해둬야함
	1. 중간에 바꾸기가 불편함, 리스트의 경우 컬럼한개가 늘어나면 row가 있는개수만큼 늘어나는데 공란으로 남기때문
 - NoSQL(not only sql, mongoDB) : 유기적 데이터베이스, 딕셔너리형태, 자유로운 형태의 데이터가 가능하나 데이터의 일관성이 부족

4. 헐 js와 파이썬의 근본적인차이
파이썬은
for 변수 in 문자열:
	row인식하기가 가능
js는
for (조건문):
	숫자를 거쳐서 row를 인식해야함
	문자열을 바로 거쳐서 출력 불가

###################4주차
PS. flask는 서버, mongodb는 데이터베이스

로컬개발환경

1. 프레임워크
	- 3분 요리/소스 세트같은거임
	- 통상적으로 flask 서버를 돌리는 파일은 app.py라고 이름지음
	- 통상적으로 프레임 워크는 하나의 프레임 워크 안에서 내가 짜는것임
	- 라이브러리는 그 안에서 백개든 천개는 가져다 쓸수 있는것

2. 포트번호
	- 포트번호는 아무거나 할수있지만 내컴퓨터안에서 돌아가고 있는 다른 포트번호가 있을수 있기때문에 정해진것을 쓰는걸 추천한다

3. 플라스크
	- 정해진 폴더구조가 있음
static, templates 폴더 + [app.py](http://app.py) 만들기! 이젠 너무 익숙하죠?

	- 서버가 있으면 html을 요청해서 받아오는 거고, 그냥 html파일을 여는것과는 구분해야한다
	- 서버컴퓨터에서 자료를 여는것

4. API(종류, 크게)
	- GET : 데이터 조회를 요청할때
	- POST : 데이터를 뭔가 바꿀때(ex.회원가입)

5. CRUD 서버 만들때 확인할것
클라이언트와 서버 확인하기 > 서버부터 만들기 > 클라이언트 만들기 > 완성확인하기

6. API 설계
	- 메타태그(크롤링): og:~~에 짧게 요약해두면 어느 사이트로 퍼가든 정보가 요약돼서 나옴
head > meta:nth-child(9) 그냥 이렇게 가져올시 None으로 찍히는 경우도 있음
그럴때는 meta태그 안에서 특정 조건을 붙여주는 것으로 값을 찾아야함

7 작업순서
POSTAPI 작업 (app.py에 클라이언트에서 주는 것들을 미리 작업친다 > 크롤링에서 받아온다면 크롤링된 데이터들을 저장해줌 > DB에 저장한다) >> 클라이언트쪽작업(ajax call로 post api를 연동해준다 > 서버에 무슨 데이터를 줄건지 적어준다 > 무슨데이터가 어느 class에 담겨있는지도 jquery로 받아온다 > 윈도우 리로드로 새로고침기능도 넣어준다) > GETAPI작업 (우선적으로 index.html와 app.py가 잘 연결되어있는지 msg로 확인한다 > get단계에선 클라이언트에게서 받을 데이터가 없음, db에서 가져와야함) >> 클라이언트쪽 작업(받아올 데이터 없음